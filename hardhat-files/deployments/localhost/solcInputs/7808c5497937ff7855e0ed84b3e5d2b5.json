{
  "language": "Solidity",
  "sources": {
    "contracts/Election.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nerror Election__AlreadyVoted();\r\nerror Election__CandidateAlreadyExists();\r\n\r\ncontract Election {\r\n    struct Candidate {\r\n        string name;\r\n        string party;\r\n        string state;\r\n        uint256 votes;\r\n    }\r\n\r\n    uint256 public numCandidates;\r\n    mapping(uint256 => Candidate) public candidates;\r\n    mapping(address => bool) public hasVoted;\r\n\r\n    event CandidateAdded(string name, string party, string state);\r\n    event Voted(\r\n        string candidateName,\r\n        string candidateParty,\r\n        uint256 indexed candidateVoteCount\r\n    );\r\n\r\n    modifier notVoted() {\r\n        if (!hasVoted[msg.sender]) {\r\n            _;\r\n        } else {\r\n            revert Election__AlreadyVoted();\r\n        }\r\n    }\r\n\r\n    // event Voted(address voter, Candidate);\r\n    function addCandidate(\r\n        string memory _name,\r\n        string memory _party,\r\n        string memory state\r\n    ) public {\r\n        for (uint i = 0; i < numCandidates; i++) {\r\n            Candidate memory candidate = candidates[i];\r\n            if (\r\n                keccak256(abi.encodePacked(candidate.name)) ==\r\n                keccak256(abi.encodePacked(_name))\r\n            ) {\r\n                revert Election__CandidateAlreadyExists();\r\n            }\r\n        }\r\n\r\n        candidates[numCandidates] = Candidate(_name, _party, state, 0);\r\n        numCandidates += 1;\r\n        emit CandidateAdded(_name, _party, state);\r\n    }\r\n\r\n    function vote(uint256 _index) public notVoted {\r\n        candidates[_index].votes += 1; // this actually updates state\r\n        hasVoted[msg.sender] = true;\r\n        Candidate memory candidate = candidates[_index];  // this \"memory\" reads from state\r\n        emit Voted(candidate.name, candidate.party, candidate.votes);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}